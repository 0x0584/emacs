;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(TeX-macro-history TeX-command-history LaTeX-environment-history org-agenda-search-history set-variable-value-history grep-history find-args-history tex-compile-history magit-read-file-hist coding-system-history dired-regexp-history org-tags-history sgml-tag-history minibuffer-history-search-history sql-user-history magit-revision-history grep-find-history org--links-history org-read-date-history sx-search--query-history Info-search-history command-history compile-history query-replace-from-to-history regexp-history wordnut-completion-hist query-replace-history yes-or-no-p-history erc-server-history-list shell-command-history Man-topic-history buffer-name-history xref--read-identifier-history c-set-style-history minibuffer-history face-name-history extended-command-history read-expression-history file-name-history))
(setq TeX-macro-history '("eqcirc"))
(setq TeX-command-history '("LaTeX"))
(setq LaTeX-environment-history '("document" "itemize"))
(setq org-agenda-search-history '("money" "[+programming][-debian]" "programming"))
(setq grep-history '("grep --color -nH -e \"LATEX\"" "grep --color -nH -e \"end*\"" "grep --color -nH -e \"end\"" "grep --color -nH -e \"array*\""))
(setq find-args-history '("-name '*.php'"))
(setq tex-compile-history '("pdflatex \\\\nonstopmode\\\\input ex1.tex"))
(setq coding-system-history '("unix"))
(setq dired-regexp-history '(".c$" ".c" "a" "*.c$" "*.c" "*.c$" "._" "*org$" "(*.org)$" "*.org" "*.org$" "*.org" "$*.c" "*.c" "*.c$"))
(setq org-tags-history '("programming" ":bibda:" ":bibda:s" ":bibda:" ":mql:papers" ":bibda:papers" "to-finish" "mql" "enset" "bibda" "fscasa" ":master:" "lp" "master" ":fscasa:" "bibda" ":papers:" "guitar" "gui" "class" "data" "goto" "find" ":not:" "find"))
(setq sgml-tag-history '("html" "ol" "u" "b" "img" "html"))
(setq magit-revision-history '("c2935f392dd8c43a9cd7559f8e9c66b5eb98613d" "master" "d5313837438da05c57420dfa945c02bcbd54048b" "ebaff946181b420ba08c28d12726e8738207c9e4" "f21db04c943eb75dec9ff37cbe69c9b1d4e00555" "0ace015c1aac896f941958059925417280d42766" "f8d54feafb403d34e6bc03e0d4bfa321ecbf5eb1" "foo" "master" "rm" "master~3" "master" "master~4" "master" "changes" "master" "v0.1.1" "master" "changes" "origin/master" "master" "v0.1b" "master" "v0.1b" "master" "changes" "master" "v0.1a" "master" "changes" "master" "origin/master" "master" "changes" "master~1" "changes" "pre-alpha" "changes" "newlook" "master" "changes" "master" "changes" "pre-alpha" "master" "newlook" "new_look" "master" "new_look" "HEAD"))
(setq grep-find-history '("find . -type f -exec grep --color -nH -e \"this is in\" {} +" "find . -type f -exec grep --color -nH -e \"last character\" {} +" "find . -type f -exec grep --color -nH -e \"\\$type\" {} +" "find . -type f -exec grep --color -nH -e \"$$$$$$\" {} +" "find . -type f -exec grep --color -nH -e \"TOKEN IS NOT\" {} +" "find . -type f -exec grep --color -nH -e \"ERROR\" {} +" "find . -type f -exec grep --color -nH -e \"CORRECT TYPE\" {} +" "find . -type f -exec grep --color -nH -e \"this is a string\" {} +" "find . -type f -exec grep --color -nH -e \"reduce_string\" {} +" "find . -type f -exec grep --color -nH -e \"assert\" {} +" "find . -type f -exec grep --color -nH -e -c \"assert\" {} +" "find . -type f -exec grep --color -nH -e \"context\" {} +" "find . -type f -exec grep --color -nH -e \"vector_log\" {} +" "find . -type f -exec grep --color -nH -e \"vector_free\" {} +" "find . -type f -exec grep --color -nH -e \"makeletterclosing\" {} +" "find . -type f -exec grep --color -nH -e \"LATEX\" {} +" "find . -type f -exec grep --color -nH -e \" main \" {} +" "find . -type f -exec grep --color -nH -e \"main\" {} +" "find . -type f -exec grep --color -nH -e \"makeletterclosing\" {} +" "find . -type f -exec grep --color -nH -e \"firstname\" {} +" "find . -type f -exec grep --color -nH -e \"Dear*\" {} +" "find . -type f -exec grep --color -nH -e \"*.php\" {} +" "find . -type f -exec grep --color -nH -e \"array*\" {} +" "find . -type f -exec grep --color -nH -e anas {} +" "find . -type f -exec grep --color -nH -e \"Xml*\" {} +" "find . -type f -exec grep --color -nH -e \"zero.c\" {} +"))
(setq org-read-date-history '("14:49    " "01:00    " "4:11    " "   " "8:00    " "02:39    " "   " "10:16    " "08:57    " "16:27    " "16:05    " "10:05    " "7:28    " "7:23    " "   " "1:14    " "1:11    " "11:58    " "3:29    " "2:59    " "2:43    " "      " "01:00    " "   " "11:55    " "09:00    " "   " "09:00    " "   " "12:00    " "   " "09:00    " "   " "    " "   " "01:00    " "09:45         " "   " "20:00    " "15:00    " "10:00    " "   " "12:00    " "   " "18:00    " "16:00    " "   " "12:00    " "   " "15:00    " "    " "20:00    "))
(setq sx-search--query-history '("date diff java" "swap nodes linked list" "swap nodes "))
(setq Info-search-history '("begin_src" "#+BEGIN_SRC"))
(setq command-history '((package-list-packages nil) (helm-themes) (customize-themes) (find-file "~/Workspace/scmin/include/lexer.h" t) (helm-themes) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/include/sexpr.h" t) (find-file-other-frame "~/Workspace/Garbage Collector/scmGC_2/parse.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/Garbage Collector/scmGC_2/" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file-other-frame "~/Workspace/Garbage Collector/scmGC_2/parse.c" t) (find-file "~/Workspace/scmin/src/lexer.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/src/lexer.c" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/src/token.c" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/src/vector.c" t) (ispell-comments-and-strings) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/src/" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/include/vector.h" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/include/token.h" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/include/characters.h" t) (query-replace "!" "*" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/include/types.h" t) (query-replace "!" "*" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/include/parser.h" t) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/include/lexer.h" t) (ispell-comments-and-strings) (ispell-comments-and-strings) (ispell-comments-and-strings) (find-file "~/Workspace/scmin/src/token.c" t) (ispell-comments-and-strings) (ispell-comments-and-strings) (find-grep "find . -type f -exec grep --color -nH -e \"this is in\" {} +") (find-file "~/Workspace/scmin/src/token.c" t) (find-file "~/Workspace/scmin/src/vector.c" t) (query-replace "str" "type_str" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "foo" "token" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/src/token.c" t) (find-file "~/Workspace/scmin/src/lexer.c" t) (kill-buffer "lexer.c<include>") (find-file "~/Workspace/scmin/include/lexer.c" t) (find-file "~/Workspace/scmin/include/vector.h" t) (find-file "~/Workspace/scmin/src/characters.c" t) (find-file "~/Workspace/scmin/src/lexer.c" t) (switch-to-buffer "vector.c" nil 'force-same-window) (create-tags "~/Workspace/scmin/") (find-file "~/Workspace/scmin/" t) (find-file "~/Workspace/scmin/Makefile" t) (find-file-other-window "~/Workspace/scmin/src/lexer.c" t) (find-file "/home/arubu/Workspace/scmin/src/vector.c" t) (find-file "~/Workspace/scmin/src/lexer.c" t) (find-file "~/Workspace/scmin/src/characters.c" t) (delete-trailing-whitespace nil nil) (find-file "~/Workspace/scmin/src/characters.c" t) (compile "cd ..; make build" nil) (compile "cd ..; make build" nil) (find-file "~/Workspace/scmin/src/characters.c" t) (find-grep "find . -type f -exec grep --color -nH -e \"last character\" {} +") (find-grep "find . -type f -exec grep --color -nH -e \"\\$type\" {} +") (find-grep "find . -type f -exec grep --color -nH -e \"$$$$$$\" {} +") (switch-to-buffer "lexer.c" nil 'force-same-window) (goto-line 204 nil) (goto-line 263 nil) (goto-line 228 nil) (find-file-other-frame "~/Workspace/Garbage Collector/scmGC_2/parse.c" t) (switch-to-buffer "characters.c" nil 'force-same-window) (create-tags "~/Workspace/scmin/") (find-file "~/Workspace/scmin/" t) (tags-query-replace "determine_token_type" "predict_token_type" nil nil) (find-grep "find . -type f -exec grep --color -nH -e \"TOKEN IS NOT\" {} +") (find-file "~/Workspace/scmin/src/" t) (find-file "~/Downloads/cv_7/cv_7.tex" t) (kill-buffer "cv_7.tex") (find-file "~/Downloads/cv_7/cv_7.tex" t) (find-file "~/Workspace/scmin/src/lexer.c" t) (find-file "~/Workspace/scmin/src/characters.c" t) (find-file "~/Workspace/scmin/examples/" t) (find-file "~/Workspace/scmin/src/gc.c" t) (compile "cd ..; make build" nil) (compile "cd ..; make build" nil) (compile "cd ..; make build" nil) (compile "cd ..; make build" nil) (compile "cd ..; make build" nil) (find-file "~/Workspace/scmin/src/characters.c" t) (find-file "~/Workspace/scmin/src/characters.c" t) (kill-buffer "make run") (goto-line 176 nil) (create-tags "~/Workspace/scmin/") (find-file "~/Workspace/scmin/" t)))
(setq compile-history '("cd ..; make build" "cd ..; make clean" "cd ..; make build" "cd ..; make clean" "make -k " "cd ..; make clean" "make docs" "cd ..; make build " "make " "make yoctolisp" "cd ..; make build" "make test" "cd ..; make build" "../.make build" "../make build" "make build" "make -k ex" "make -k server" "make -k main" "make -k " "make -k utils" "make -k ll" "../make -k " "make -k " "make" "make " "make clean"))
(setq regexp-history '("s" "main" "if" "latex" "fstack" "para" "void" "abs" "^int *(*) {"))
(setq wordnut-completion-hist '("determine" "states" "state" "stat" "stats" "vacuum" "lack" "even" "grade" "*" "who's" "whose" "owe" "ought" "modulus"))
(setq query-replace-history '("*" "!" "type_str" "str" "token" "foo" "predict_token_type" "determine_token_type" "stream_string" "stream_char" "vbuffer" "buffer" "sexpr" "value" "sexpr_t" "value_t" "struct S_EXPR" "struct VALUE" "struct VALUE" "S_EXPR" "VALUE" "S_EXPR" "VALUE" "" "TOKEN_" "REPL" "GC" "PARSER" "GC" "lexer_" "lispin_" "sexpr_token" "sexpr_type" "I" "i" "S_EXPR_" "SEXPR_" "-" "*" "I" "i" "sexpr" "sexpParser" "=Java=" "java" "=Java=" "java" "pst" "sql" "" " -n" "" "-n" "::" "--" "lispin" "repl" "expression_t" "expression" "lispin" "repl" "void *" "int" "repl_stream" "stream" " " "	" "Universit\\'e" "Universite" "mention" "montion" "," " avec" "syst\\`eme" "syst\\'eme" "syst\\`eme" "syst\\\\'eme" "\\`a" "\\‘a" "\\‘a" "\\'a" ".git}{}" ".git}" ">" "\"" " <" " \"" "," "-" "|" "," "|" "::" "" "Chapter . - " "it is" "it's" "I am" "i'm" "I"))
(setq yes-or-no-p-history '("yes" "no" "yes" "iyes" "yes" "es" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "tes" "yes" "no" "yes" "no" "yes"))
(setq shell-command-history '("firefox docs/html/index.html " "cd ..; tree" "./yoctolisp (this)" "make" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "cc server.c -oserver -lpthread" "make main" "make " "make" "git pull origin master" "git remote add origin master" "sort -u -k 2" "sort -u -k 3" "zip * sdku.zip -F" "zip * sdku.zip" "* gzip -r foo.zip" "* gzip foo.zip" "make" "cd;make" "make" "make " "mv *.h include/" "mv *.c src" "ls -l | grep \"README_*\"" "git pull -f" "meld out*" "git add -f README.pdf " "git add README.pdf " "valgrind ./utils" "ls" "grep --color \"def *\"" "grep --color \"return\"" "git cl \"http://\"gitlab.com/__0x0584__/algs-in-c.git\"\"" "git cl gitlab.com/__0x0584__/algs-in-c.git" "find . -name \"*.orig\" -print0 | xargs -0 rm -v" "find . -name \"*.orig\"" "find . -name *.xml -ls" "find . -name *.xml" "find . -name \"*.orig\" -print0 | xargs -0 rm -v" "find . -name \"*.orig\"" "git clone https://github.com/0x0584/dot-files" "tar -czf foo.tar.gz *" "tar czf s01" "gzip *" "gzip" "xclip -o" "xclip -O" "xclip -o" "mkdir aoa"))
(setq Man-topic-history '("strpbrk" "ungetc" "strcpy" "strlen" "strcpy" "strcat" "fgets" "time" "realloc" "cbreak" "newwin" "cbreak" "strlen" "gcc" "sprintf"))
(setq buffer-name-history '("lexer.c<include>" "vector.c" "lexer.c" "characters.c" "cv_7.tex" "make run" "characters.c" "lexer.c" "characters.h" "lexer.c" "lexer.h" "lexer.c" "token.c:58" "lexer.c" "*ansi-term*" "object.h" "error.c<src>" "lexer.h" "types.h<scmGC_2>" "*info*" "*Macroexpansion*" "lexer.h" "lexer.c" "lexer.h" "repl.c" "vector.c" "moderncvstylebanking.sty" "moderncvstyleclassic.sty" "cv_7.tex" "vector.c.~ff533d9629cd465defe66e52a1ebbb85c5356057~" "*ansi-term*" "lexer.c" "glob.h" "comment.c" "foo.lisp" "ls" "*ansi-term*" "*Macroexpansion*" "foo.lisp" "stdlib.l" "README.org<lispin>" " *next-file*" "README.org<lispin>" "*EShell Command Output*" "test.txt" "main.c" "sexpr.c" "*ansi-term*" "sexpParser.h" "*ansi-term*" "jee.tex" "java.pdf" "foo.tex" "java.org" "jee.pdf" "*ansi-term*<2>" "main.c" "repl.h" "repl.c" "main.c" "repl.c" "main.c<src>" "cv_7.tex" "gnome-shell.css" "ubuntu.css" "gnome-shell.css" "*Macroexpansion*" "oryx_bf.c" "resume.org" "summer-7e2.org" "resume.org" "resume.pdf" "resume.org" "log" "sr" "src" "Makefile" "utils.h" "output.txt" "*ansi-term*" "an" "*ansi-term*" "testing.c" "primes.py" "primes.txt" "primes<primes>" "primes.txt" "list.h" "primes.txt" "utils.h" "primes.py" "utils.c" "Makefile" "list.h" "utils.c" "MASTER.org" "Makefile" "include" ".swp" "src.sql"))
(setq c-set-style-history '("cc-mode"))
(setq minibuffer-history '("yin" "goth" "read" #("\\_<vector_debug\\_>" 3 13 (fontified t) 13 15 (fontified t)) "0x0584" "204" "263" "228" "176" "393" "111" "170" "30" "/bin/bash" "226" "186" "298" "111" "58" "152" "186" "233" "/bin/bash" "e86411" "https://github.com/fragglet/yoctolisp/commit/e86411" "copying garbage collection" "https://en.wikipedia.org/wiki/Cheney%27s\\_algorithm" "39" "this" "car" "environment" "car" "printf" "chmod" "grep" "car" "read" #("\\_<TokenType\\_>" 3 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t)) "102" "/bin/bash" "30" "666" "95" "15" "112" "110" "47" "44" "45" "44" "45" "122" "45" "122" "18" "sly" "Roots of Lisp" "Recursive Functions of Symbolic Expressions
and Their Computation by Machine" "markdown-toc" "markdown-preview-mode" "markdownfmt" "pointer
     tagging" "http://nikic.github.com/2012/02/02/Pointer-magic-for-efficient-dynamic-value-representations.html" "ebaff9" "https://github.com/fragglet/yoctolisp/commit/ebaff9" "46" "37" "72" "93" "72" "113" "74" "44" "67" "ac-math" "" "article" "a4paper" "article" "JSP page" "sec:ccc" "sss" "section" "s" "	j" "par" "yin" "go" "DEFAULT_PROMPT" "156" "125" "130" "138" "141" "138" "Fig. 1" "fig-iot" "USE_LOGGING" "list_log" "list_init"))
(setq face-name-history '("magit-diff-removed-highlight" "flycheck-error" "flycheck-warning" "flycheck-error" "flycheck-warning" "makefile-targets" "org-warning" "org-agenda-done" "org-agenda-date-today" "org-upcoming-deadline" "org-agenda-done" "org-warning" "org-list-dt" "org-list-dt, org-checkbox" "org-list-dt" "diff-refine-added" "diff-refine-removed" "diff-refine-added" "diff-refine-removed" "magit-diff-removed-highlight" "magit-diff-added-highlight" "diff-refine-removed" "diff-refine-added" "magit-section-highlight" "org-checkbox-statistics-todo" "font-lock-function-name-face" "font-lock-string-face" "org-checkbox-statistics-todo" "org-archived, org-checkbox-statistics-todo" "org-checkbox-statistics-todo" "font-lock-function-name-face" "org-level-1" "org-level-2" "org-verbatim" "org-level-2" "org-level-1" "org-level-3" "all faces" "font-lock-function-name-face" "org-checkbox" "font-lock-preprocessor-face, font-lock-negation-char-face"))
(setq extended-command-history '("package-list-packages" "helm-themes" "customize-themes" "helm-themes" "ispell-comments-and-strings" "find-grep" "create-tags" "delete-trailing-whitespace" "find-grep" "create-tags" "find-grep" "create-tags" "find-grep" "ansi-term" "create-tags" "find-grep" "create-tags" "find-grep" "calculator" "ansi-term" "org-mode" "text-mode" "find-grep" "delete-trailing-whitespace" "package-install" "ispell-comments-and-strings" "checkdoc-ispell-comments" "delete-trailing-whitespace" "delete-file" "calculator" "customize-group" "package-install" "customize-group" "customize-variable" "magithub-dashboard" "find-grep" "create-tags" "delete-trailing-whitespace" "ansi-term" "pwd" "delete-file" "pwd" "calculator" "pwd" "create-tags" "vc-dir-menu" "find-grep" "create-tags" "pwd" "calculator" "grep-find" "grep" "find-grep" "create-tags" "customize-face" "customize-themes" "package-list-packages" "package-install" "ielm" "inferior-lisp" "common-lisp-mode" "visual-line-mode" "create-tags" "package-install" "delete-trailing-whitespace" "create-tags" "delete-trailing-whitespace" "create-tags" "customize-face" "auto-complete-mode" "calculator" "auto-insert" "toggle-frame-fullscreen" "artist-mode" "TeX-complete-symbol" "package-install" "flush-lines" "calculator" "auto-complete-mode" "package-install" "rename-file" "find-grep" "visual-line-mode" "helm-themes" "delete-file" "create-tags" "delete-file" "create-tags" "whitespace-mode" "auto-insert" "visual-line-mode" "find-grep" "calculator" "package-install" "visual-line-mode" "whitespace-mode" "org-table-create-with-table.el" "calculator" "calc" "insert-date"))
(setq read-expression-history '("(find-file user-init-file)" "(* (+ 3 (/ 4 2)) (- 3 4))" "(find-file user-init-file)" "(* 7 (- 5 (+ 7 3)))" "(* 7 (/ 5 (+ 7 3)))" "(* 7 (* 5 (+ 7 3)))" "(/ 7 (* 5 (+ 7 3)))" "(find-file user-init-file)" "(global-set-key (kbd \"C-c d\") (lambda ()
                                (interactive)
                                (delete-region)))" "(find-file user-init-file)" "(setq epa-file-select-keys nil) " "(setq epg-gpg-program \"/usr/bin/gpg\")" "(setq epg-gpg-program \"/opt/bin/gpg\")" "(setq epg-gpg-program \"/opt/local/bin/gpg\")" "(org-latex-caption-above)" "(message 'org-latex-caption-above)" "(message org-latex-caption-above)" "(find-file user-init-file)" "(add-to-list 'org-latex-packages-alist '(\"\" \"minted\"))" "(require 'ox-latex)" "  (setq org-latex-listings 'minted)" "(setq org-src-fontify-natively t)" "(define-key vdiff-mode-map (kbd \"C-=\") vdiff-mode-prefix-map)" "(find-file user-init-file)" "(define-key vdiff-mode-map (kbd \"C-c\") vdiff-mode-prefix-map)" "(define-key vdiff-mode-map (kbd \"C-=\") vdiff-mode-prefix-map)" "(define-key vdiff-mode-map (kbd \"C-c C-=\") vdiff-mode-prefix-map)" "(require 'vdiff)" "(find-file user-init-file)" "(defun c-reformat-buffer()
  (interactive)
  (save-buffer)
  (setq sh-indent-command
	(concat \"indent -nbad -bap -bbo -nbc -br -brs \"
		\"-brf -c33 -cd33 -ncdb -ce -ci4 -cli0 \"
		\"-cp33 -cs -d0 -di4 -nfc1 -nfca -hnl \"
		\"-i4 -ip0 -l75 -lp -npcs -nprs -npsl \"
		\"-saf -sai -saw -nsc -nsob -nss -ppi2 \"))
  (mark-whole-buffer)
  (universal-argument)
  (shell-command-on-region
   (point-min)
   (point-max)
   sh-indent-command
   (buffer-name))
  (save-buffer))" "(defun c-reformat-buffer()
  (interactive)
  (save-buffer)
  (setq sh-indent-command
	(concat \"indent -nbad -bap -bbo -nbc -br -brs -di4\"
		\"-brf -c33 -cd33 -ncdb -ce -ci4 -cli0 \"
		\"-cp33 -cs -d0 -di1 -nfc1 -nfca -hnl \"
		\"-i4 -ip0 -l75 -lp -npcs -nprs -npsl \"
		\"-saf -sai -saw -nsc -nsob -nss -ppi2 \"))
  (mark-whole-buffer)
  (universal-argument)
  (shell-command-on-region
   (point-min)
   (point-max)
   sh-indent-command
   (buffer-name))
  (save-buffer))" "(setq standard-indent 4)" "(find-file user-init-file)" "(edit-server-start)" "(require 'edit-server)" "(find-file user-init-file)" "(setenv \"SHELL\" (expand-file-name \"/bin/sh\"))" "(find-file user-init-file)" "(setq TeX-PDF-mode t)" "(setq TeX-save-query nil)" "(setq TeX-parse-self t)" "(setq TeX-auto-save t)" "(find-file user-init-file)" "(* 5 (+ 7 3))" "(* 5 5)" "(find-file user-init-file)" "(setq org-alert-interval 2500)" "(find-file user-init-file)" "(add-hook 'before-save-hook 'delete-nl-spaces)" "
(add-hook 'find-file-hook 'delete-nl-spaces-find-file-hook)
" "
(defun delete-nl-spaces-find-file-hook ()
  \"Check whether to disable `delete-nl-spaces'.\"
  (when (and (buffer-file-name) (file-exists-p (buffer-file-name)))
    (let ((buffer (current-buffer))
          (final-newline require-final-newline)
          (tabs-mode indent-tabs-mode))
      (with-temp-buffer
        (setq-local require-final-newline final-newline)
        (setq indent-tabs-mode tabs-mode)
        (insert-buffer-substring buffer)
        (delete-nl-spaces)
        (unless (= (compare-buffer-substrings buffer nil nil nil nil nil) 0)
          (set-buffer buffer)
          (delete-nl-spaces-mode -1)
          (message \"delete-nl-spaces-mode disabed for %s\"
                   (buffer-name buffer)))))))
" "(find-file user-init-file)" "(global-set-key (kbd \"C-x t\") 'eshell)" "(find-file user-init-file)" "(file-file user-init-file)" "(setq org-alert-interval 1800)" "(setq org-alert-interval 900)" "(setq org-alert-interval 900)	; 60 sec * 30 min" "(setq org-alert-interval 1800)	; 60 sec * 30 min" "(setq org-alert-interval (* (* 60 30) 2))	; 60 sec * 30 min" "(setq org-alert-interval 900*2)" "(setq org-alert-interval 900*2)	; 60 sec * 30 min" "(find-file user-init-file)" "(set-face-attribute 'linum nil :height 100)" "(find-file user-init-file)" "(set-face-attribute 'linum nil :height 100)" "(setq auto-insert-alist
      '(((ruby-mode . \"Ruby program\") nil
         \"#!/usr/bin/env ruby\\n\\n\"
         \"# File: \" (file-name-nondirectory buffer-file-name) \"\\n\"
         \"# Time-stamp: <>\\n\"
         \"# Copyright (C) \" (substring (current-time-string) -4) \" \" auto-insert-copyright \"\\n\"
         \"# Description: \" _ \"\\n\\n\")
	((emacs-lisp-mode . \"Emacs lisp mode\") nil
         \";;; \" (file-name-nondirectory buffer-file-name) \" --- \" _ \"\\n\\n\"
         \";; Time-stamp: <>\\n\"
         \";; Copyright (C) \" (substring (current-time-string) -4) \" \" auto-insert-copyright \"\\n\\n\"
         \";;; Commentary:\\n\\n\"
         \";;; Code:\\n\\n\"
         \";;; \" (file-name-nondirectory buffer-file-name) \" ends here\\n\")

	((c-mode . \"C program\") nil
	 \"/* FILE: \\t\" (file-name-nondirectory buffer-file-name) \"\\n\"
	 \" * AUTHOR: \\tANAS RCHID\\n\"
	 \" * DESCRIPTION:\\tNULL\\n\"
	 \" * \\n\"
	 \" * CREATION:\\t\" (insert-date) \"\\n\"
	 \" * MODIFIED:\\t\" (insert-date) \"\\n */\\n\\n\"
	 )
        ((shell-mode . \"Shell script\") nil
         \"#!/bin/bash\\n\\n\"
         \" # File: \" (file-name-nondirectory buffer-file-name) \"\\n\"
         \" # Time-stamp: <>\\n\"
         \" # Copyright (C) \" (substring
			      (current-time-string) -4) \" \"
			      auto-insert-copyright \"\\n\"
			      \" # Description: \" _ \"\\n\\n\")
	((cperl-mode . \"Perl\") nil
	 \"#!/usr/bin/perl\"
	 \"\\n#=======================================================\"
	 \"========================\"
	 \"\\n#\"
	 \"\\n#         FILE: \" (file-name-nondirectory buffer-file-name)
	 \"\\n#\"
	 \"\\n#        USAGE: ./\" (file-name-nondirectory buffer-file-name)
	 \"\\n#\"
	 \"\\n#  DESCRIPTION: ---\"
	 \"\\n#\"
	 \"\\n#      OPTIONS: ---\"
	 \"\\n# REQUIREMENTS: ---\"
	 \"\\n#         BUGS: ---\"
	 \"\\n#        NOTES: ---\"
	 \"\\n#       AUTHOR: Anas Rchid (0x0584) <rchid.anas@gmail.com>\"
	 \"\\n# ORGANIZATION: ---\"
	 \"\\n#      VERSION: 1.0\"
	 \"\\n#      CREATED: \" (insert-date)
	 \"\\n#     REVISION: ---\"
	 \"\\n#========================================================\"
	 \"=======================\")
	))" "(find-file user-init-file)" "(setq org-latex-listings 'minted)" "(find-file user-init-file)" "(global-set-key (kbd \"C-c s\") 'swap-buffer)" "(defun swap-buffer ()
  (interactive)
  (cond ((one-window-p) (display-buffer (other-buffer)))
        ((let* ((buffer-a (current-buffer))
                (window-b (cadr (window-list)))
                (buffer-b (window-buffer window-b)))
           (set-window-buffer window-b buffer-a)
           (switch-to-buffer buffer-b)
           (other-window 1)))))" "(find-file user-init-file)" "(require 'desktop+)" "(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))))" "(find-file user-init-file)" "(setq c-default-style \"cc-mode\")" "(find-file user-init-file)" "(defun c-reformat-buffer()
  (interactive)
  (save-buffer)
  (setq sh-indent-command
	(concat \"indent -nbad -bap -bbo -nbc -br -brs \"
		\"-brf -c33 -cd33 -ncdb -ce -ci4 -cli0 \"
		\"-cp33 -cs -d0 -di1 -nfc1 -nfca -hnl \"
		\"-i4 -ip0 -l75 -lp -npcs -nprs -npsl \"
		\"-saf -sai -saw -nsc -nsob -nss -ppi2 \"))
  (mark-whole-buffer)
  (universal-argument)
  (shell-command-on-region
   (point-min)
   (point-max)
   sh-indent-command
   (buffer-name))
  (save-buffer))" "(find-file user-init-file)"))
(setq file-name-history '("~/Workspace/scmin/include/lexer.h" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/include/sexpr.h" "~/Workspace/scmin/" "~/Workspace/Garbage Collector/scmGC_2/parse.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/src/parser.c" "/home/arubu/Workspace/Lisp/lithp/main.c" "/tmp/mozilla_arubu0/ps2tw1.scm" "~/Workspace/Garbage Collector/scmGC_2/" "~/Workspace/scmin/src/sexpr.c" #("sexpr.h" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face) 5 6 (fontified t c-in-sws t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face c-in-sws t)) "~/Workspace/scmin/src/sexpr.c" "TAGS" "~/Workspace/scmin/src/parser.c" "~/Workspace/Garbage Collector/scmGC_2/parse.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/src/" "~/Workspace/scmin/include/vector.h" "~/Workspace/scmin/include/token.h" "~/Workspace/scmin/include/characters.h" "~/Workspace/scmin/include/types.h" "~/Workspace/scmin/include/parser.h" "~/Workspace/scmin/include/lexer.h" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/include/lexer.c" "~/Workspace/scmin/include/vector.h" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/" "~/Workspace/scmin/Makefile" "~/Workspace/scmin/src/lexer.c" "/home/arubu/Workspace/scmin/src/vector.c" "/home/arubu/Workspace/scmin/log" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/characters.c" "~/Workspace/Garbage Collector/scmGC_2/parse.c" "~/Workspace/scmin/" "~/Workspace/scmin/src/" "/home/arubu/Downloads/cv_7/cv_7.tex" "~/Downloads/cv_7/cv_7.tex" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/examples/" "~/Workspace/scmin/src/gc.c" "/home/arubu/Workspace/scmin/extra/stdlib.scm" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/make run" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/include/characters.h" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/include/token.h" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/include/lexer.h" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/src/" "~/Workspace/scmin/src/character-stream.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/" "~/Workspace/scmin/include/token.h" "~/Workspace/scmin/include/characters.h" "~/Workspace/scmin/include/token.h" "~/Workspace/scmin/include/vector.h" "~/Workspace/scmin/include/" "~/Workspace/scmin/src/character-stream.c" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/include/characters.h" "~/Workspace/scmin/include/lexer.h" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/include/vector.h" "~/Workspace/scmin/src/character-stream.c" "~/Workspace/scmin/include/vector.h" "~/Workspace/scmin/include/lexer.h" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/token.c:58" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/character-stream.c" "~/Workspace/scmin/src/token.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/include/lexer.c" "~/Workspace/scmin/src/character-stream.c" "~/Workspace/scmin/include/token.h"))
