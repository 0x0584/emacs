;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(synonyms-history gud-guiler-history grep-files-history grep-regexp-history search-ring TeX-macro-history TeX-command-history LaTeX-environment-history org-agenda-search-history set-variable-value-history grep-history find-args-history tex-compile-history magit-read-file-hist coding-system-history dired-regexp-history org-tags-history sgml-tag-history minibuffer-history-search-history sql-user-history magit-revision-history grep-find-history org--links-history org-read-date-history sx-search--query-history Info-search-history command-history compile-history query-replace-from-to-history regexp-history wordnut-completion-hist query-replace-history yes-or-no-p-history erc-server-history-list shell-command-history Man-topic-history buffer-name-history xref--read-identifier-history c-set-style-history minibuffer-history face-name-history extended-command-history read-expression-history file-name-history))
(setq synonyms-history '("having"))
(setq gud-guiler-history '("guile "))
(setq grep-files-history '("*.[ch]"))
(setq grep-regexp-history '("main"))
(setq search-ring '("vector_find" "isfi" "empty" "S_" "p" "main" "sweep"))
(setq TeX-macro-history '("eqcirc"))
(setq TeX-command-history '("LaTeX"))
(setq LaTeX-environment-history '("document" "itemize"))
(setq org-agenda-search-history '("money" "[+programming][-debian]" "programming"))
(setq grep-history '("git --no-pager grep -n -e main -- *.[ch]" "grep --color -nH -e \"fix:\" -c" "grep --color -nH -e \"LATEX\"" "grep --color -nH -e \"end*\"" "grep --color -nH -e \"end\"" "grep --color -nH -e \"array*\""))
(setq find-args-history '("-name '*.php'"))
(setq tex-compile-history '("pdflatex \\\\nonstopmode\\\\input ex1.tex"))
(setq coding-system-history '("unix"))
(setq dired-regexp-history '(".c$" ".c" "a" "*.c$" "*.c" "*.c$" "._" "*org$" "(*.org)$" "*.org" "*.org$" "*.org" "$*.c" "*.c" "*.c$"))
(setq org-tags-history '("programming" ":bibda:" ":bibda:s" ":bibda:" ":mql:papers" ":bibda:papers" "to-finish" "mql" "enset" "bibda" "fscasa" ":master:" "lp" "master" ":fscasa:" "bibda" ":papers:" "guitar" "gui" "class" "data" "goto" "find" ":not:" "find"))
(setq sgml-tag-history '("html" "ol" "u" "b" "img" "html"))
(setq magit-revision-history '("eval" "master" "eval" "master" "GC" "eval" "GC" "master" "GC" "master" "GC" "eval" "GC" "b7f39338e392dba8633adce63bcc6155bbe5892c" "eval" "GC" "master" "changes" "master" "GC" "ddd27b4" "master" "ddd27b4" "cons" "ddd27b4b34ac6bc3327e12ad334e71463459e856" "master" "FETCH_HEAD" "master" "8f9ead3888c6aba15d8d87b4f1ef1f2c484ed2ce" "bf30d7072e3e305ab76c95c8ec432c03faffcffb" "20197b9" "origin/master" "c2935f392dd8c43a9cd7559f8e9c66b5eb98613d" "master" "d5313837438da05c57420dfa945c02bcbd54048b" "ebaff946181b420ba08c28d12726e8738207c9e4" "f21db04c943eb75dec9ff37cbe69c9b1d4e00555" "0ace015c1aac896f941958059925417280d42766" "f8d54feafb403d34e6bc03e0d4bfa321ecbf5eb1" "foo" "master" "rm" "master~3" "master" "master~4" "master" "changes" "master" "v0.1.1" "master" "changes" "origin/master" "master" "v0.1b" "master" "v0.1b" "master" "changes" "master" "v0.1a" "master" "changes" "master" "origin/master" "master" "changes" "master~1" "changes" "pre-alpha" "changes" "newlook" "master" "changes" "master" "changes" "pre-alpha" "master" "newlook" "new_look" "master" "new_look" "HEAD"))
(setq grep-find-history '("find . -type f -exec grep --color -nH -e \"finished\" {} +" "find . -type f -exec grep --color -nH -e \"VERBOSE_EVAL\" {} +" "find . -type f -exec grep --color -nH -e \"main\" {} +" "find . -type f -exec grep --color -nH -e \"expr was NULL\" {} +" "find . -type f -exec grep --color -nH -e \"exp was NULL\" {} +" "find . -type f -exec grep --color -nH -e \"collect_garbage\" {} +" "find . -type f -exec grep --color -nH -e \"nice\" {} +" "find . -type f -exec grep --color -nH -e \"getchar()\" {} +" "find . -type f -exec grep --color -nH -e \"this is in\" {} +" "find . -type f -exec grep --color -nH -e \"last character\" {} +" "find . -type f -exec grep --color -nH -e \"\\$type\" {} +" "find . -type f -exec grep --color -nH -e \"$$$$$$\" {} +" "find . -type f -exec grep --color -nH -e \"TOKEN IS NOT\" {} +" "find . -type f -exec grep --color -nH -e \"ERROR\" {} +" "find . -type f -exec grep --color -nH -e \"CORRECT TYPE\" {} +" "find . -type f -exec grep --color -nH -e \"this is a string\" {} +" "find . -type f -exec grep --color -nH -e \"reduce_string\" {} +" "find . -type f -exec grep --color -nH -e \"assert\" {} +" "find . -type f -exec grep --color -nH -e -c \"assert\" {} +" "find . -type f -exec grep --color -nH -e \"context\" {} +" "find . -type f -exec grep --color -nH -e \"vector_log\" {} +" "find . -type f -exec grep --color -nH -e \"vector_free\" {} +" "find . -type f -exec grep --color -nH -e \"makeletterclosing\" {} +" "find . -type f -exec grep --color -nH -e \"LATEX\" {} +" "find . -type f -exec grep --color -nH -e \" main \" {} +" "find . -type f -exec grep --color -nH -e \"main\" {} +" "find . -type f -exec grep --color -nH -e \"makeletterclosing\" {} +" "find . -type f -exec grep --color -nH -e \"firstname\" {} +" "find . -type f -exec grep --color -nH -e \"Dear*\" {} +" "find . -type f -exec grep --color -nH -e \"*.php\" {} +" "find . -type f -exec grep --color -nH -e \"array*\" {} +" "find . -type f -exec grep --color -nH -e anas {} +" "find . -type f -exec grep --color -nH -e \"Xml*\" {} +" "find . -type f -exec grep --color -nH -e \"zero.c\" {} +"))
(setq org-read-date-history '("8:00    " "4:45    " "   " "14:49    " "01:00    " "4:11    " "   " "8:00    " "02:39    " "   " "10:16    " "08:57    " "16:27    " "16:05    " "10:05    " "7:28    " "7:23    " "   " "1:14    " "1:11    " "11:58    " "3:29    " "2:59    " "2:43    " "      " "01:00    " "   " "11:55    " "09:00    " "   " "09:00    " "   " "12:00    " "   " "09:00    " "   " "    " "   " "01:00    " "09:45         " "   " "20:00    " "15:00    " "10:00    " "   " "12:00    " "   " "18:00    " "16:00    " "   " "12:00    " "   " "15:00    " "    " "20:00    "))
(setq sx-search--query-history '("date diff java" "swap nodes linked list" "swap nodes "))
(setq Info-search-history '("begin_src" "#+BEGIN_SRC"))
(setq command-history '((switch-to-buffer-other-window "vector.c") (find-file "~/Workspace/scmin/src/scope.c" t) (find-file "~/Workspace/scmin/src/vector.c" t) (create-tags "~/Workspace/scmin/") (find-file "~/Workspace/scmin/" t) (find-file "~/Workspace/scmin/src/scope.c" t) (magit-stash-drop #("stash@{1}" 0 9 (fontified nil))) (goto-line 52 nil) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/scope.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/" t) (goto-line 6 nil) (find-file "~/Workspace/scmin/src/scope.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/include/native.h" t) (query-replace "eval_" "native_" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "eval_" "native" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/src/scope.c" t) (kill-buffer "main.c") (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/pos1-biorythm/src/main.c" t) (query-replace "scope_t *, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "scope_t *, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "scope_t *s, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "scope_t *, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "scope_t *, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "eval_" "native_" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/src/native.c" t) (query-replace "scope_t *, ..." "sexpr_t *expr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "eval_" "native_" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (switch-to-buffer "native.h" nil 'force-same-window) (find-file "~/Workspace/scmin/src/native.c" t) (find-file "~/Workspace/scmin/src/scope.c" t) (find-file "~/Workspace/scmin/src/native.c" t) (find-file "~/Workspace/scmin/src/scope.c" t) (find-file "~/Workspace/scmin/src/native.c" t) (find-file "~/Workspace/scmin/src/native.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/include/native.h" t) (tags-query-replace "Nlambda_t" "native_t" nil nil) (find-file "~/Workspace/scmin/include/types.h" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/scmin/include/main.h" t) (find-file "~/Workspace/scmin/src/kwd.txt" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/include/main.h" t) (find-file "~/Workspace/scmin/include/types.h" t) (find-file "~/Workspace/scmin/include/main.h" t) (query-replace " sexpr_t *" "..." nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "sexpr_t *" "..." nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (query-replace "s-expr" "sexpr" nil (if (use-region-p) (region-beginning)) (if (use-region-p) (region-end)) nil nil) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/include/native.h" t) (find-file "~/Workspace/scmin/include/main.h" t) (tags-query-replace "bool_t" "bool" nil nil) (create-tags "~/Workspace/scmin/") (find-file "~/Workspace/scmin/" t) (find-file "~/Workspace/scmin/include/main.h" t) (find-file "~/Workspace/scmin/include/types.h" t) (find-file "~/Workspace/scmin/include/types.h" t) (find-file "~/Workspace/scmin/include/eval.h" t) (find-file "~/Workspace/scmin/include/types.h" t) (find-file "~/Workspace/scmin/src/eval.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/eval.c" t) (magit-checkout "eval") (find-file "~/Workspace/scmin/src/main.c" t) (find-file "~/Workspace/scmin/src/characters.c" t) (magit-checkout "master") (find-file "~/Workspace/scmin/include/main.h" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/scmin/src/sexpr.c" t) (find-file "~/Workspace/scmin/src/gc.c" t) (find-file "~/Workspace/scmin/src/parser.c" t) (find-file "~/Workspace/scmin/src/main.c" t) (find-file "~/Workspace/scmin/src/" t) (find-file "~/Workspace/master/mql/java.org" t) (find-file "/home/arubu/orged/LP-DBA/gl.org" t) (find-file "~/Workspace/scmin/src/" t) (find-file "~/orged/db-normalisation.org" t) (customize-themes) (customize-themes) (kill-buffer "eval.c.~dd4f2eebd5057a13fea3aa340419dac6b815bdfc~") (vc-revision-other-window "") (kill-buffer "eval.c.~master~") (vc-revision-other-window "master") (magit-log '("master") '("--graph" "--color" "--decorate" "-n256") nil) (customize-themes) (find-file "~/Workspace/scmin/src/eval.c" t) (customize-face '(magit-section-highlight)) (customize-face '(magit-section-highlight))))
(setq compile-history '("cd ..; make build" "cd ..; make clean" "cd ..; make build" "cd ..; make clean" "make -k " "cd ..; make clean" "make docs" "cd ..; make build " "make " "make yoctolisp" "cd ..; make build" "make test" "cd ..; make build" "../.make build" "../make build" "make build" "make -k ex" "make -k server" "make -k main" "make -k " "make -k utils" "make -k ll" "../make -k " "make -k " "make" "make " "make clean"))
(setq regexp-history '("error" "s" "main" "if" "latex" "fstack" "para" "void" "abs" "^int *(*) {"))
(setq wordnut-completion-hist '("determine" "states" "state" "stat" "stats" "vacuum" "lack" "even" "grade" "*" "who's" "whose" "owe" "ought" "modulus"))
(setq query-replace-history '("native_" "eval_" "native" "eval_" "sexpr_t *expr" "scope_t *, ..." "sexpr_t *expr" "scope_t *s, ..." "sexpr_t *expr" "scope_t *, ..." "sexpr_t *expr" "scope_t *, ..." "native_" "eval_" "sexpr_t *expr" "scope_t *, ..." "native_" "eval_" "native_t" "Nlambda_t" "..." " sexpr_t *" "..." "sexpr_t *" "sexpr" "s-expr" "bool" "bool_t" "gc_allocd_lambdas" "gc_allocated_lambdas" "gc_allocd_contexts" "gc_allocated_contexts" "gc_allocd_scopes" "gc_allocated_scopes" "gc_allocd_sexprs" "gc_allocated_sexprs" "lambda" "scope" "bond_new" "bond_init" "bound" "bond" "" "v\\." "" "v\\." "" "v\\." "" "v\\." "bond" "bind" "new" "init" "symbol" "atom" "as_symbol" "as_atom" "T_SYMBOL" "T_ATOM" "" "}" "" "{" "void " "sexpr_t *" "apply" "eval" "a b c" "init" "cope" "expr" "bind_t" "binding_t" "EOL" "TOK_EOL" "as_symbol" "as_atom" "TOK_STRING" "TOK_D_QUOTE" "TOK_QUOTE" "TOK_S_QUOTE" "TOK_SYMBOL" "TOK_ATOM" "TOK_SYMBOL" "TOK_ATOM" "" "flash " "" "eeprom " "print_obj" "print_func" "free_obj" "free_func" "pair" "p" "sexpr_t" "pair_t" "value" "tmp"))
(setq yes-or-no-p-history '("yes" "yse" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "iyes" "yes" "es" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "tes" "yes" "no" "yes" "no" "yes"))
(setq shell-command-history '("ls ~/.emacs.d/" "ls -la ~/.ssh/" "cd ..; tree" "git branch -d GC" "make docs" "cloc ." "grep --color \"fix\"" "grep -c \"fix\"" "grep \"fix:\"" "grep -c \"\\*\"" "firefox docs/html/index.html " "cd ..; tree" "./yoctolisp (this)" "make" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "./ex" "cc ex.c -oex -lm" "cc server.c -oserver -lpthread" "make main" "make " "make" "git pull origin master" "git remote add origin master" "sort -u -k 2" "sort -u -k 3" "zip * sdku.zip -F" "zip * sdku.zip" "* gzip -r foo.zip" "* gzip foo.zip" "make" "cd;make" "make" "make " "mv *.h include/" "mv *.c src" "ls -l | grep \"README_*\"" "git pull -f" "meld out*" "git add -f README.pdf " "git add README.pdf " "valgrind ./utils" "ls" "grep --color \"def *\"" "grep --color \"return\"" "git cl \"http://\"gitlab.com/__0x0584__/algs-in-c.git\"\"" "git cl gitlab.com/__0x0584__/algs-in-c.git" "find . -name \"*.orig\" -print0 | xargs -0 rm -v" "find . -name \"*.orig\"" "find . -name *.xml -ls" "find . -name *.xml" "find . -name \"*.orig\" -print0 | xargs -0 rm -v" "find . -name \"*.orig\"" "git clone https://github.com/0x0584/dot-files" "tar -czf foo.tar.gz *" "tar czf s01" "gzip *" "gzip" "xclip -o" "xclip -O" "xclip -o" "mkdir aoa"))
(setq Man-topic-history '("strtod" "strpbrk" "ungetc" "strcpy" "strlen" "strcpy" "strcat" "fgets" "time" "realloc" "cbreak" "newwin" "cbreak" "strlen" "gcc" "sprintf"))
(setq buffer-name-history '("vector.c" "main.c" "native.h" "eval.c.~dd4f2eebd5057a13fea3aa340419dac6b815bdfc~" "eval.c.~master~" "init.el" "langtool" "*Shell Command Output*" "init.el" "*unsent mail*" "eval.c" "gc.c" "*Shell Command Output*" "sexpr.h" "alloc.c" "*Colors*" "*helm colors*" "vector.c" "init.el" "vector.c" "*helm colors*" "apply.h" "gl" ".gitignore" "scope.c" "*ansi-term*" "lambda.tex" "*Helm Help*" "ece476_final_project.c" "parser.c" "pair.c" "*ansi-term*<4>" "scmin<scmin>" "parser.c" "*ansi-term*<2>" "Main.o" "*gud*" "log" "mai" "main.c" "gc.c" "init.el" "parser.c" "parse.c" "lexer.c" "token.c" "sexpr.h" "main.c" "context.c" "eval.c" "context.c" "context.h<Workspace>" "context.h" "init.el" "lexer.c<include>" "vector.c" "lexer.c" "characters.c" "cv_7.tex" "make run" "characters.c" "lexer.c" "characters.h" "lexer.c" "lexer.h" "lexer.c" "token.c:58" "lexer.c" "*ansi-term*" "object.h" "error.c<src>" "lexer.h" "types.h<scmGC_2>" "*info*" "*Macroexpansion*" "lexer.h" "lexer.c" "lexer.h" "repl.c" "vector.c" "moderncvstylebanking.sty" "moderncvstyleclassic.sty" "cv_7.tex" "vector.c.~ff533d9629cd465defe66e52a1ebbb85c5356057~" "*ansi-term*" "lexer.c" "glob.h" "comment.c" "foo.lisp" "ls" "*ansi-term*" "*Macroexpansion*" "foo.lisp" "stdlib.l" "README.org<lispin>" " *next-file*" "README.org<lispin>" "*EShell Command Output*" "test.txt" "main.c"))
(setq xref--read-identifier-history '("assert" "evaluation_stack" "b" "eval"))
(setq c-set-style-history '("cc-mode"))
(setq minibuffer-history '("52" "6" "master" "Anas Rchid" "main" "cfw" "synonymous" "free" "sr-speedbar" "0x0584" "gc_mark_sc" "gc_sweep_" "scope_describe " "gc_mark_scop" "75" "bond_n" "gc_mark_scope " "155" "124" "171" "26" "30" "61" "129" "182" "get_eval_stack " "gc_sweep_sexprs " "evaluation_stack " #("\\_<Lambda\\_>" 3 9 (face font-lock-type-face fontified t)) #("object_t" 0 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face c-type c-decl-id-start fontified t)) #("008b8b" 0 6 (face font-lock-string-face fontified t)) "yi" "gr" "0x0584" "within" "isatom " "vector_add " "vector_push " "cons_assoc_lookup " "symbol_intern " "plus " "apply" "map-regexp" "context_init " "context_t " "On master: creating an evaluator" "make_native_lambda " "gc_alloc_scope " #("\\_<Environment\\_>" 3 14 (fontified t)) #("\\_<TYPE\\_>" 3 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-type-start face font-lock-type-face)) "0x0584" "parse" "0x0584" "139" "gc_debug_me" "parser_testing " "er_tes" "include" "parse as _symbo" "helm-git-files" "helm-git-grep" "helm-git" "\\_<\\_>" "On master: lexer must has serious bugs" "15" "pee" "145" "dark color background" "ac-slime" "cons" "token" "0x0584" "285" "157" "154" "45" "107" "48" "48:34" "179" "180" "19" "collec" "133" "On GC: handling the quote operator like '(foo bar)" "GC" "bug:" "bug" "fix" "0x0584" "15" "45" "58" "38" "50" "92" "parse" #("\\_<vector_debug\\_>" 3 15 (fontified t)) #("\\_<object_t\\_>" 3 4 (c-is-sws t fontified t face font-lock-type-face) 4 10 (fontified t face font-lock-type-face) 10 11 (fontified t c-type c-decl-id-start face font-lock-type-face)) "On master: parsing"))
(setq face-name-history '("magit-section-highlight" "cfw:face-holiday" "cfw:face-select" "cfw:face-today-title" "cfw:face-sunday" "cfw:face-today-title" "cfw:face-select" "cfw:face-sunday" "cfw:face-toolbar" "magit-section-highlight" "font-lock-constant-face" "font-lock-constant-face, font-lock-doc-face" "magit-diff-removed-highlight" "flycheck-error" "flycheck-warning" "flycheck-error" "flycheck-warning" "makefile-targets" "org-warning" "org-agenda-done" "org-agenda-date-today" "org-upcoming-deadline" "org-agenda-done" "org-warning" "org-list-dt" "org-list-dt, org-checkbox" "org-list-dt" "diff-refine-added" "diff-refine-removed" "diff-refine-added" "diff-refine-removed" "magit-diff-removed-highlight" "magit-diff-added-highlight" "diff-refine-removed" "diff-refine-added" "magit-section-highlight" "org-checkbox-statistics-todo" "font-lock-function-name-face" "font-lock-string-face" "org-checkbox-statistics-todo" "org-archived, org-checkbox-statistics-todo" "org-checkbox-statistics-todo" "font-lock-function-name-face" "org-level-1" "org-level-2" "org-verbatim" "org-level-2" "org-level-1" "org-level-3" "all faces" "font-lock-function-name-face" "org-checkbox" "font-lock-preprocessor-face, font-lock-negation-char-face"))
(setq extended-command-history '("create-tags" "customize-themes" "customize-face" "cfw:open-calendar-buffer" "customize-face" "customize-group" "customize-face" "cfw:open-calendar-buffer" "customize-face" "cfw:open-calendar-buffer" "org-alert-check" "find-grep" "langtool-check-done" "langtool-check" "langtool-show-message-at-point" "langtool-check" "package-install" "synonyms-definition" "synonymous-synonyms" "package-install" "flycheck-mode" "langtool-check" "sr-speedbar-toggle" "sr-speedbar-open" "zone" "zone-mode" "package-list-packages" "git-timemachine" "sr-speedbar-close" "sr-speedbar-select-window" "sr-speedbar-open" "sr-speedbar-select-window" "sr-speedbar-toggle" "sr-speedbar-open" "sr-speedbar-close" "sr-speedbar-open" "package-install" "speedbar" "symon-display" "symon-mode" "symon-display" "symon-mode" "org-alert-check" "create-tags" "helm-colors" "list-colors-display" "helm-colors" "visual-line-mode" "helm-themes" "nyan-mode" "helm-themes" "visual-line-mode" "helm-themes" "create-tags" "delete-trailing-whitespace" "create-tags" "find-grep" "make-directory" "desktop-save-in-desktop-dir" "create-tags" "find-grep" "package-install" "map-query-replace-regexp" "calculator" "create-tags" "delete-file" "helm-git-grep-from-here" "helm-git-grep-from-helm" "helm-git-files" "helm-git-grep" "helm-git-files" "package-install" "helm-gitignore" "package-install" "helm-etags-select" "find-grep" "hexl-mode" "delete-trailing-whitespace" "create-tags" "visual-line-mode" "flycheck-mode" "cpp-highlight-buffer" "hexl-mode" "package-install" "guiler" "create-tags" "delete-trailing-whitespace" "calculator" "customize-face" "delete-trailing-whitespace" "create-tags" "insert-time" "toggle-frame-fullscreen" "find-grep" "create-tags" "magit-todos-mode" "toggle-frame-fullscreen" "package-list-packages" "grep" "create-tags"))
(setq read-expression-history '("(find-file user-init-file)" "(custom-set-faces
 '(cfw:face-title ((t (:foreground \"#f0dfaf\" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-header ((t (:foreground \"#d0bf8f\" :weight bold))))
 '(cfw:face-sunday ((t :foreground \"#cc9393\" :background \"grey10\" :weight bold)))
 '(cfw:face-saturday ((t :foreground \"#8cd0d3\" :background \"grey10\" :weight bold)))
 '(cfw:face-holiday ((t :background \"grey10\" :foreground \"#8c5353\" :weight bold)))
 '(cfw:face-grid ((t :foreground \"DarkGrey\")))
 '(cfw:face-default-content ((t :foreground \"#bfebbf\")))
 '(cfw:face-periods ((t :foreground \"cyan\")))
 '(cfw:face-day-title ((t :background \"grey10\")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-annotation ((t :foreground \"RosyBrown\" :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground \"DarkGray\" :inherit cfw:face-day-title)))
 '(cfw:face-today-title ((t :background \"#7f9f7f\" :weight bold)))
 '(cfw:face-today ((t :background: \"grey10\" :weight bold)))
 '(cfw:face-select ((t :background \"#2f2f2f\")))
 ;; '(cfw:face-toolbar ((t :foreground \"Steelblue4\" :background \"Steelblue4\")))
 '(cfw:face-toolbar-button-off ((t :foreground \"Gray10\" :weight bold)))
 '(cfw:face-toolbar-button-on ((t :foreground \"Gray50\" :weight bold))))" "(custom-set-faces
 '(cfw:face-title ((t (:foreground \"#f0dfaf\" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-header ((t (:foreground \"#d0bf8f\" :weight bold))))
 '(cfw:face-sunday ((t :foreground \"#cc9393\" :background \"grey10\" :weight bold)))
 '(cfw:face-saturday ((t :foreground \"#8cd0d3\" :background \"grey10\" :weight bold)))
 '(cfw:face-holiday ((t :background \"grey10\" :foreground \"#8c5353\" :weight bold)))
 '(cfw:face-grid ((t :foreground \"DarkGrey\")))
 '(cfw:face-default-content ((t :foreground \"#bfebbf\")))
 '(cfw:face-periods ((t :foreground \"cyan\")))
 '(cfw:face-day-title ((t :background \"grey10\")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-annotation ((t :foreground \"RosyBrown\" :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground \"DarkGray\" :inherit cfw:face-day-title)))
 '(cfw:face-today-title ((t :background \"#7f9f7f\" :weight bold)))
 '(cfw:face-today ((t :background: \"grey10\" :weight bold)))
 '(cfw:face-select ((t :background \"#2f2f2f\")))
 '(cfw:face-toolbar ((t :foreground \"Steelblue4\" :background \"Steelblue4\")))
 '(cfw:face-toolbar-button-off ((t :foreground \"Gray10\" :weight bold)))
 '(cfw:face-toolbar-button-on ((t :foreground \"Gray50\" :weight bold))))" "(find-file user-init-file)" "(global-set-key \"\\C-x4c\" 'langtool-correct-buffer)" "(global-set-key \"\\C-x44\" 'langtool-show-message-at-point)" "(global-set-key \"\\C-x4l\" 'langtool-switch-default-language)" "(global-set-key \"\\C-x4W\" 'langtool-check-done)" "(global-set-key \"\\C-x4w\" 'langtool-check)" "(find-file user-init-file)" "(setq langtool-language-tool-jar \"~/.emacs.d/langtool/languagetool-commandline.jar\")" "(setq langtool-language-tool-jar \"~/.emacs.d/langtool/languagetool-server.jar\")" "(setq langtool-language-tool-jar \"~/.emacs.d/langtool/languagetool.jar\")" "(find-file user-init-file)" "(global-set-key (kbd \"C-c ]\") 'sr-speedbar-open)" "(global-set-key (kbd \"C-c [\") 'sr-speedbar-close)" "(global-set-key (kbd \"C-c []\") 'sr-speedbar-close)" "(find-file user-init-file)" "(global-set-key (kbd \"C-c ]\") 'sr-speedbar-close)" "(global-set-key (kbd \"C-c [\") 'sr-speedbar-open)" "
(global-set-key (kbd \"C-c [\") 'sr-speedbar-open)
(global-set-key (kbd \"C-c ]\") 'sr-speedbar-close)" "(global-set-key (kbd \"C-c \\'\") 'sr-speedbar-select-window)" "(find-file user-init-file)" "(message symon-linux--last-cpu-ticks)" "(setq symon-sparkline-width 65)" "(message symon-sparkline-width)" "(setq symon-sparkline-type 'bounded)" "(setq symon-delay 15)" "(find-file user-init-file)" "(defun highlight-or-dehighlight-line ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays
       (line-beginning-position)
       (+ 1 (line-end-position)))
    (let ((overlay-highlight
	   (make-overlay
	    (line-beginning-position)
	    (+ 1 (line-end-position)))))
      (overlay-put
       overlay-highlight 'face '(:background \"#2f4f4f\"))
      (overlay-put
       overlay-highlight 'line-highlight-overlay-marker t))))" "(defun highlight-or-dehighlight-line ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays
       (line-beginning-position)
       (+ 1 (line-end-position)))
    (let ((overlay-highlight
	   (make-overlay
	    (line-beginning-position)
	    (+ 1 (line-end-position)))))
      (overlay-put
       overlay-highlight 'face '(:background \"#F5F5F5\"))
      (overlay-put
       overlay-highlight 'line-highlight-overlay-marker t))))" "(defun highlight-or-dehighlight-line ()
  (interactive)
  (if (find-overlays-specifying
       'line-highlight-overlay-marker
       (line-beginning-position))
      (remove-overlays
       (line-beginning-position)
       (+ 1 (line-end-position)))
    (let ((overlay-highlight
	   (make-overlay
	    (line-beginning-position)
	    (+ 1 (line-end-position)))))
      (overlay-put
       overlay-highlight 'face '(:background \"#008b8b\"))
      (overlay-put
       overlay-highlight 'line-highlight-overlay-marker t))))" "(find-file user-init-file)" "(global-set-key (kbd \"C-,\") 'helm-git-grep-from-here)" "(find-file user-init-file)" "(require 'magit-todos)" "(find-file user-init-file)" "(* (+ 3 (/ 4 2)) (- 3 4))" "(find-file user-init-file)" "(* 7 (- 5 (+ 7 3)))" "(* 7 (/ 5 (+ 7 3)))" "(* 7 (* 5 (+ 7 3)))" "(/ 7 (* 5 (+ 7 3)))" "(find-file user-init-file)" "(global-set-key (kbd \"C-c d\") (lambda ()
                                (interactive)
                                (delete-region)))" "(find-file user-init-file)" "(setq epa-file-select-keys nil) " "(setq epg-gpg-program \"/usr/bin/gpg\")" "(setq epg-gpg-program \"/opt/bin/gpg\")" "(setq epg-gpg-program \"/opt/local/bin/gpg\")" "(org-latex-caption-above)" "(message 'org-latex-caption-above)" "(message org-latex-caption-above)" "(find-file user-init-file)" "(add-to-list 'org-latex-packages-alist '(\"\" \"minted\"))" "(require 'ox-latex)" "  (setq org-latex-listings 'minted)" "(setq org-src-fontify-natively t)" "(define-key vdiff-mode-map (kbd \"C-=\") vdiff-mode-prefix-map)" "(find-file user-init-file)" "(define-key vdiff-mode-map (kbd \"C-c\") vdiff-mode-prefix-map)" "(define-key vdiff-mode-map (kbd \"C-=\") vdiff-mode-prefix-map)" "(define-key vdiff-mode-map (kbd \"C-c C-=\") vdiff-mode-prefix-map)" "(require 'vdiff)" "(find-file user-init-file)" "(defun c-reformat-buffer()
  (interactive)
  (save-buffer)
  (setq sh-indent-command
	(concat \"indent -nbad -bap -bbo -nbc -br -brs \"
		\"-brf -c33 -cd33 -ncdb -ce -ci4 -cli0 \"
		\"-cp33 -cs -d0 -di4 -nfc1 -nfca -hnl \"
		\"-i4 -ip0 -l75 -lp -npcs -nprs -npsl \"
		\"-saf -sai -saw -nsc -nsob -nss -ppi2 \"))
  (mark-whole-buffer)
  (universal-argument)
  (shell-command-on-region
   (point-min)
   (point-max)
   sh-indent-command
   (buffer-name))
  (save-buffer))" "(defun c-reformat-buffer()
  (interactive)
  (save-buffer)
  (setq sh-indent-command
	(concat \"indent -nbad -bap -bbo -nbc -br -brs -di4\"
		\"-brf -c33 -cd33 -ncdb -ce -ci4 -cli0 \"
		\"-cp33 -cs -d0 -di1 -nfc1 -nfca -hnl \"
		\"-i4 -ip0 -l75 -lp -npcs -nprs -npsl \"
		\"-saf -sai -saw -nsc -nsob -nss -ppi2 \"))
  (mark-whole-buffer)
  (universal-argument)
  (shell-command-on-region
   (point-min)
   (point-max)
   sh-indent-command
   (buffer-name))
  (save-buffer))" "(setq standard-indent 4)" "(find-file user-init-file)" "(edit-server-start)" "(require 'edit-server)" "(find-file user-init-file)" "(setenv \"SHELL\" (expand-file-name \"/bin/sh\"))" "(find-file user-init-file)" "(setq TeX-PDF-mode t)" "(setq TeX-save-query nil)" "(setq TeX-parse-self t)" "(setq TeX-auto-save t)" "(find-file user-init-file)" "(* 5 (+ 7 3))" "(* 5 5)" "(find-file user-init-file)" "(setq org-alert-interval 2500)" "(find-file user-init-file)" "(add-hook 'before-save-hook 'delete-nl-spaces)" "
(add-hook 'find-file-hook 'delete-nl-spaces-find-file-hook)
" "
(defun delete-nl-spaces-find-file-hook ()
  \"Check whether to disable `delete-nl-spaces'.\"
  (when (and (buffer-file-name) (file-exists-p (buffer-file-name)))
    (let ((buffer (current-buffer))
          (final-newline require-final-newline)
          (tabs-mode indent-tabs-mode))
      (with-temp-buffer
        (setq-local require-final-newline final-newline)
        (setq indent-tabs-mode tabs-mode)
        (insert-buffer-substring buffer)
        (delete-nl-spaces)
        (unless (= (compare-buffer-substrings buffer nil nil nil nil nil) 0)
          (set-buffer buffer)
          (delete-nl-spaces-mode -1)
          (message \"delete-nl-spaces-mode disabed for %s\"
                   (buffer-name buffer)))))))
" "(find-file user-init-file)" "(global-set-key (kbd \"C-x t\") 'eshell)" "(find-file user-init-file)" "(file-file user-init-file)" "(setq org-alert-interval 1800)" "(setq org-alert-interval 900)" "(setq org-alert-interval 900)	; 60 sec * 30 min" "(setq org-alert-interval 1800)	; 60 sec * 30 min" "(setq org-alert-interval (* (* 60 30) 2))	; 60 sec * 30 min" "(setq org-alert-interval 900*2)" "(setq org-alert-interval 900*2)	; 60 sec * 30 min" "(find-file user-init-file)" "(set-face-attribute 'linum nil :height 100)"))
(setq file-name-history '("~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/include/native.h" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/eval.c" "/home/arubu/Workspace/pos1-biorythm/Makefile" "~/Workspace/pos1-biorythm/src/main.c" "/home/arubu/Workspace/pos1-biorythm/src" "/home/arubu/Downloads/mainU.dfm" "~/Workspace/scmin/src/native.c" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/native.c" "~/Workspace/scmin/src/scope.c" "~/Workspace/scmin/src/native.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/include/native.h" "~/Workspace/scmin/" "~/Workspace/scmin/include/types.h" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/src/kwd.txt" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/include/types.h" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/include/native.h" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/include/types.h" "~/Workspace/scmin/include/eval.h" "~/Workspace/scmin/include/types.h" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/main.c" "~/Workspace/scmin/src/characters.c" "~/Workspace/scmin/include/main.h" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/src/gc.c" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/main.c" "~/Workspace/scmin/src/" "~/Workspace/master/mql/java.org" "/home/arubu/orged/LP-DBA/gl.org" "~/Workspace/scmin/src/" "~/orged/db-normalisation.org" "/home/arubu/orged/LP-DBA/gl.org" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin" "~/Workspace/foo.c" "/home/arubu/Workspace/snake/src/main.c" "/home/arubu/Workspace/snake/test/test.ts" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/parser.c" "/home/arubu/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/src/parser.c" "/home/arubu/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/gc.c" "~/Workspace/scmin/include/main.h" "~/.emacs.d/langtool/" "~/Workspace/scmin/src/README.org" "~/Workspace/scmin/src/parser.c" "~/Workspace/scmin/src/lexer.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/Garbage Collector/scmGC_2/values.h" "~/Workspace/Garbage Collector/scmGC_2/alloc.c" "~/Workspace/scmin/src/sexpr.c" "~/Workspace/scmin/src/gc.c" "~/Workspace/scmin/src/vector.c" "~/Workspace/scmin/include/sexpr.h" "~/Workspace/scmin/src/native.c" "~/Workspace/scmin/src/gc.c" "~/Workspace/scmin/src/eval.c" "~/Workspace/master/mql/oral.org" "~/orged/agenda/summer-7e2.org" "~/Workspace/scmin/" "~/Workspace/scmin/src/eval.c" "~/Workspace/scmin/src/gc.c" "~/Workspace/scmin/README.org" "/tmp/mozilla_arubu0/parser.sml" "~/Workspace/scmin/README.org" "~/Workspace/scmin/.git/"))
